I want to rewrite some aspects of the Mitrailleuse. I will explain the tasks that Mitrailleuse needs to done and you will generate the classes accordingly. Use Pydantic, SOLID principles and Hexagonal Architecture in the necessary parts. 1) The Most Important Thing Is: SENDING REQUESTS TO MULTIPLE APIs however in this stage, 1 request will be sent to 1 API but I should be able to change requested API by stating endpoint /openai/{user_id} will be sent to openai. Therefore combining each api request classes under the same BaseAPI might be better. 2) Communication with Mitrailleuse will be done by gRPC 3) For the 1st iteration which we will keep coding, needs to send request to openai. 4) You need to create a grpc service that generates tasks folder under the project structure with {user_id} and generated task name. Under this tasks folder, users will manually move their inputs to the inputs folder. 5) You need to save the given Config under config folder when creating the project structure folder. That way we can keep track of the config issues as well. 6) For the general requesting structure, it should support multiprocessing. Under the inputs folder, if multiprocessing is enabled in the config of the task, each input file should be its own process up to a threshold limit let's say 10 but make this threshold limit dynamically generated, if not just give 10. Also, I want to persist the results to their own in-memory caches so that when we run a request, it should be able to check its cache and not resend a token. This cache then can be persisted under the cache folder of the project. 7) For the openai api you need to do the followings: It should be able to send a "I am alive" response to check whether our connection string is correct or we can access to openai servers. It should be able to send requests line by line directly without batching. It should send requests with batching: Meaning it should keep track of the batch process, it should save the batch process to a file. It should keep track of its batch basically. 8) I also want a general logger class for all of the steps that both prints to the terminal if verbose of the config is enabled and logs under the log.log file of a task. Ask questions if there is unclarified part of the project. I want to be able to send request by will to those APIs. The task is similar in nature to LangChain. I want all of the classes separately and want to utilize gRPC. Utilize Pydantic. Utilize SOLID principles
I will provide you the existing config files that I've written. When a user sends a request using their user_id, under the tasks folder, the user_id task should be created. Under that folder: {api_name}_{task_name}_{date} should be created for example: openai_test_shot_21_04_2025_155231. Under there, it should have the following folders: config, logs, inputs, outputs, cache.

For the gRPC service, I want to expose task creation, task execution, status checking. For API communication, I am currently supporting OpenAI batching and response etc but program that part in a way so that I can extend my API communications. For the caching mechanism, I want to use a simple file-based cache however in the future I might move to redis, but not yet. For the retry strategy implement a circuit breaker pattern.

Also provide me THE WHOLE PROJECT FROM SCRATCH and with example requests to this service


python -m grpc_tools.protoc -Iproto --python_out=./mitrailleuse --grpc_python_out=./mitrailleuse proto/mitrailleuse.proto